var searchIndex = {};
searchIndex["formdata"] = {"doc":"This crate parses and processes a stream of data that contains\n`multipart/form-data` content.","items":[[5,"parse_multipart","formdata","Parses and processes a stream of `multipart/form-data` content.",null,{"inputs":[{"name":"s"},{"name":"string"}],"output":{"name":"result"}}],[5,"get_multipart_boundary","","Get the `multipart/form-data` boundary string from hyper::Headers",null,{"inputs":[{"name":"headers"}],"output":{"name":"result"}}],[0,"buf","","",null,null],[8,"BufReadExt","formdata::buf","Extends any type that implements BufRead with a stream_until_token() function.",null,null],[11,"stream_until_token","","Streams all bytes to `out` until the `token` delimiter is reached.",0,null],[0,"error","formdata","",null,null],[4,"Error","formdata::error","An error type for the `formdata` crate.",null,null],[13,"NoRequestContentType","","The Hyper request did not have a Content-Type header.",1,null],[13,"NotMultipart","","The Hyper request Content-Type top-level Mime was not `Multipart`.",1,null],[13,"NotFormData","","The Hyper request Content-Type sub-level Mime was not `FormData`.",1,null],[13,"BoundaryNotSpecified","","The Content-Type header failed to specify boundary token.",1,null],[13,"PartialHeaders","","A multipart section contained only partial headers.",1,null],[13,"MissingDisposition","","A multipart section did not have the required Content-Disposition header.",1,null],[13,"InvalidDisposition","","A multipart section did not have a valid corresponding Content-Disposition.",1,null],[13,"NoName","","A multipart section Content-Disposition header failed to specify a name.",1,null],[13,"Eof","","The request body ended prior to reaching the expected terminating boundary.",1,null],[13,"Httparse","","An HTTP parsing error from a multipart section.",1,null],[13,"Io","","An I/O error.",1,null],[13,"Hyper","","An error was returned from Hyper.",1,null],[13,"Utf8","","An error occurred during UTF-8 processing.",1,null],[13,"Decoding","","An error occurred during character decoding",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"fmt","","",1,null],[11,"description","","",1,null],[0,"form_data","formdata","",null,null],[3,"FormData","formdata::form_data","The extracted text fields and uploaded files from a `multipart/form-data` request.",null,null],[12,"fields","","Name-value pairs for plain text fields. Technically, these are form data parts with no\nfilename specified in the part&#39;s `Content-Disposition`.",2,null],[12,"files","","Name-value pairs for temporary files. Technically, these are form data parts with a filename\nspecified in the part&#39;s `Content-Disposition`.",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"new","","",2,{"inputs":[],"output":{"name":"formdata"}}],[0,"uploaded_file","formdata","",null,null],[3,"UploadedFile","formdata::uploaded_file","An uploaded file that was received as part of `multipart/form-data` parsing.",null,null],[12,"path","","The temporary file where the data was saved.",3,null],[12,"filename","","The filename that was specified in the data, unfiltered. It may or may not be legal on the\nlocal filesystem.",3,null],[12,"content_type","","The unvalidated content-type that was specified in the data.",3,null],[12,"size","","The size of the file.",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"new","","",3,{"inputs":[{"name":"mime"}],"output":{"name":"result"}}],[11,"drop","","",3,null]],"paths":[[8,"BufReadExt"],[4,"Error"],[3,"FormData"],[3,"UploadedFile"]]};
initSearch(searchIndex);
